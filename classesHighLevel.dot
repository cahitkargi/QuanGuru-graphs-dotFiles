digraph "classes_quanguru" {
graph [ dpi=300 ];
rankdir=BT
charset="utf-8"

/* 
 * all the classes: gathered with other classes in the same module and (mostly) arranged in the order they appear in the 
 * module (expect when I switched the order to adjust the .png), this arrangement shows where they are in the inheritance
 * or where they become part of composition in the inheritance.
 * The modules are arranged: - first from the top of the inheritance, - then what I think is a more fundamental module.
 * 
 * nodes in each module are shown with the same color. Note that I treat QGates as part of QPro
 */

// base.py
"classes.base.named" [color="black", fontcolor="black", label="named", shape="box", style="filled", fillcolor="#f0ffff"];
"classes.base.qBase" [color="black", fontcolor="black", label="qBase", shape="box", style="filled", fillcolor="#f0ffff"];

// baseClasses.py
"classes.baseClasses.paramBoundBase" [color="black", fontcolor="black", label="paramBoundBase", shape="box", style="filled", fillcolor="#f5f5dc"];
"classes.baseClasses.computeBase" [color="black", fontcolor="black", label="computeBase", shape="box", style="filled", fillcolor="#f5f5dc"];
"classes.baseClasses.qBaseSim" [color="black", fontcolor="black", label="qBaseSim", shape="box", style="filled", fillcolor="#f5f5dc"];
"classes.baseClasses.stateBase" [color="black", fontcolor="black", label="stateBase", shape="box", style="filled", fillcolor="#f5f5dc"];
"classes.baseClasses.timeBase" [color="black", fontcolor="black", label="timeBase", shape="box", style="filled", fillcolor="#f5f5dc"];

// QSys.py
"classes.QSys.QuantumSystem" [color="black", fontcolor="black", label="QuantumSystem", shape="box", style="filled", fillcolor="#cbeaf5"];

// QSim.py
"classes.QSim.Simulation" [color="black", fontcolor="black", label="Simulation", shape="box", style="filled", fillcolor="#ffc7c7"];

// QPro.py (and QGates)
"classes.QPro.genericProtocol" [color="black", fontcolor="black", label="genericProtocol", shape="box", style="filled", fillcolor="#e5ffe3"];

// QSweep.py
"classes.QSweep.Sweep" [color="black", fontcolor="black", label="Sweep", shape="box", style="filled", fillcolor="#fffaad"];

// QRes.py
"classes.QRes.qResults" [color="black", fontcolor="black", label="qResults", shape="box", style="filled", fillcolor="#fdb3ff"];


/*
 * Inheritance structure: gathered according to the modules from which the parent class/es live and
 * arranged from: - first from the top of the inheritance, - then what I think is a more fundamental module.
 */

// Inheriting from base.py
"classes.base.qBase" -> "classes.base.named" [arrowhead="empty", arrowtail="none"];
"classes.QRes.qResults" -> "classes.base.qBase" [arrowhead="empty", arrowtail="none"];
"classes.QSweep.Sweep" -> "classes.base.qBase" [arrowhead="empty", arrowtail="none"];
"classes.baseClasses.paramBoundBase" -> "classes.base.qBase" [arrowhead="empty", arrowtail="none"];

// Inheriting from baseClasses.py
"classes.QPro.genericProtocol" -> "classes.baseClasses.qBaseSim" [arrowhead="empty", arrowtail="none"];
"classes.QSim.Simulation" -> "classes.baseClasses.timeBase" [arrowhead="empty", arrowtail="none"];
"classes.QSys.QuantumSystem" -> "classes.baseClasses.qBaseSim" [arrowhead="empty", arrowtail="none"];
"classes.baseClasses.computeBase" -> "classes.baseClasses.paramBoundBase" [arrowhead="empty", arrowtail="none"];
"classes.baseClasses.qBaseSim" -> "classes.baseClasses.computeBase" [arrowhead="empty", arrowtail="none"];
"classes.baseClasses.stateBase" -> "classes.baseClasses.computeBase" [arrowhead="empty", arrowtail="none"];
"classes.baseClasses.timeBase" -> "classes.baseClasses.stateBase" [arrowhead="empty", arrowtail="none"];

// Inheriting from QSys.py
// Inheriting from QPro.py
// Inheriting from QRes.py
// Inheriting from environment.py
// Inheriting from QDrive.py

}
